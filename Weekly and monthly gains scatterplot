import yfinance as yf
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

def plot_gains(ticker, frequency='weekly'):
    # Download stock data
    stock_data = yf.download(ticker, period="10y", interval="1d")

    # Resample and calculate gains based on frequency
    if frequency == 'weekly':
        stock_data['Gain'] = stock_data['Close'].resample('W-FRI').last().pct_change() * 100
        stock_data = stock_data[stock_data.index.weekday == 4]  # Filter for Fridays
        # For weekly data, use the original DatetimeIndex for plotting
        plot_x = stock_data.index
    elif frequency == 'monthly':
        # Group by month and year, then calculate monthly gains
        stock_data['Month'] = stock_data.index.month
        stock_data['Year'] = stock_data.index.year
        stock_data = stock_data.groupby(['Year', 'Month'])['Close'].last().reset_index()
        stock_data['Gain'] = stock_data['Close'].pct_change() * 100
        # Sort by Year and Month
        stock_data.sort_values(by=['Year', 'Month'], inplace=True)
        # For monthly data, create a DateTimeIndex for plotting
        plot_x = pd.to_datetime(stock_data['Year'].astype(str) + '-' + stock_data['Month'].astype(str) + '-01')

    # ... (rest of the code for handling MultiIndex and renaming columns) ...

    # Create scatter plot
    plt.figure(figsize=(8, 4))  # Adjust figure size if needed
    plt.scatter(plot_x, stock_data['Gain'], color='blue')  # Use plot_x for x-axis
    plt.title(f'{frequency.capitalize()} Gains of {ticker} Over the Last 10 Years')
    plt.xlabel('Date')
    plt.ylabel(f'{frequency.capitalize()} Gain (%)')
    plt.grid(True)
    plt.xticks(rotation=45, ha='right')  # Rotate x-axis labels for better readability
    plt.tight_layout()
    plt.show()

# Example usage:
plot_gains('AMZN', frequency='weekly')  # Plot weekly gains as scatter plot
plot_gains('AMZN', frequency='monthly')  # Plot monthly gains as scatter plot
